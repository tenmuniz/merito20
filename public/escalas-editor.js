// Script para edi√ß√£o direta de equipes na p√°gina escalas.html

// Dados iniciais das equipes (ser√° usado apenas se n√£o houver dados no localStorage)
const defaultTeams = {
    alfa: [
        "2¬∫ SGT PM PEIXOTO",
        "3¬∫ SGT PM RODRIGO",
        "3¬∫ SGT PM LEDO",
        "3¬∫ SGT PM NUNES",
        "3¬∫ SGT PM AMARAL",
        "CB PM CARLA",
        "CB PM FELIPE",
        "CB PM BARROS",
        "CB PM A. SILVA",
        "SD PM LUAN",
        "SD PM NAVARRO"
    ],
    bravo: [
        "1¬∫ SGT PM OLIMAR",
        "2¬∫ SGT PM F√ÅBIO",
        "3¬∫ SGT PM ANA CLEIDE",
        "3¬∫ SGT PM GLEIDSON",
        "3¬∫ SGT PM CARLOS EDUARDO",
        "3¬∫ SGT PM NEGR√ÉO",
        "CB PM BRASIL",
        "SD PM MARV√ÉO",
        "SD PM IDELVAN"
    ],
    charlie: [
        "2¬∫ SGT PM PINHEIRO",
        "3¬∫ SGT PM RAFAEL",
        "CB PM MIQUEIAS",
        "CB PM M. PAIX√ÉO",
        "SD PM CHAGAS",
        "SD PM CARVALHO",
        "SD PM GOVEIA",
        "SD PM ALMEIDA",
        "SD PM PATRIK",
        "SD PM GUIMAR√ÉES"
    ]
};

// Lista completa de todos os militares
const allMilitaryDatabase = [
    "1¬∫ SGT PM OLIMAR",
    "2¬∫ SGT PM PINHEIRO",
    "2¬∫ SGT PM PEIXOTO",
    "2¬∫ SGT PM F√ÅBIO",
    "3¬∫ SGT PM RODRIGO",
    "3¬∫ SGT PM LEDO",
    "3¬∫ SGT PM NUNES",
    "3¬∫ SGT PM AMARAL",
    "3¬∫ SGT PM ANA CLEIDE",
    "3¬∫ SGT PM GLEIDSON",
    "3¬∫ SGT PM CARLOS EDUARDO",
    "3¬∫ SGT PM NEGR√ÉO",
    "3¬∫ SGT PM RAFAEL",
    "CB PM BRASIL",
    "CB PM CARLA",
    "CB PM FELIPE",
    "CB PM BARROS",
    "CB PM A. SILVA",
    "CB PM MIQUEIAS",
    "CB PM M. PAIX√ÉO",
    "SD PM MARV√ÉO",
    "SD PM IDELVAN",
    "SD PM LUAN",
    "SD PM NAVARRO",
    "SD PM CHAGAS",
    "SD PM CARVALHO",
    "SD PM GOVEIA",
    "SD PM ALMEIDA",
    "SD PM PATRIK",
    "SD PM GUIMAR√ÉES"
];

// Inicializar dados padr√£o se necess√°rio
function initializeDefaultTeamData() {
    for (const team in defaultTeams) {
        if (!localStorage.getItem(`equipe_${team}`)) {
            localStorage.setItem(`equipe_${team}`, JSON.stringify(defaultTeams[team]));
        }
    }
}

// Sobrescrever a fun√ß√£o openEquipeModal
function openEquipeModal(equipe) {
    console.log("Abrindo edi√ß√£o direta para equipe:", equipe);
    
    // Iniciar modo de edi√ß√£o para a equipe diretamente na p√°gina
    const section = document.querySelector(`.equipe-${equipe}`);
    if (!section) return;
    
    // Verificar se j√° est√° em modo de edi√ß√£o
    if (section.classList.contains('edit-mode')) {
        // Sair do modo de edi√ß√£o
        exitEditMode(equipe);
    } else {
        // Entrar em modo de edi√ß√£o
        enterEditMode(equipe);
    }
}

// Entrar em modo de edi√ß√£o para a equipe
function enterEditMode(equipe) {
    const section = document.querySelector(`.equipe-${equipe}`);
    if (!section) return;
    
    // Adicionar classe de modo de edi√ß√£o
    section.classList.add('edit-mode');
    
    // Mudar o bot√£o de editar para salvar
    const editBtn = document.getElementById(`editEquipe${equipe.charAt(0).toUpperCase() + equipe.slice(1)}Btn`);
    if (editBtn) {
        editBtn.textContent = "üíæ Salvar";
        editBtn.classList.add('save-btn');
    }
    
    // Mostrar formul√°rio de adi√ß√£o de membros
    showAddMemberForm(equipe, section);
    
    // Mostrar bot√µes de remo√ß√£o para cada membro
    showRemoveButtons(equipe);
}

// Sair do modo de edi√ß√£o para a equipe
function exitEditMode(equipe) {
    const section = document.querySelector(`.equipe-${equipe}`);
    if (!section) return;
    
    // Remover classe de modo de edi√ß√£o
    section.classList.remove('edit-mode');
    
    // Mudar o bot√£o de salvar para editar
    const editBtn = document.getElementById(`editEquipe${equipe.charAt(0).toUpperCase() + equipe.slice(1)}Btn`);
    if (editBtn) {
        editBtn.textContent = "‚úèÔ∏è Editar";
        editBtn.classList.remove('save-btn');
    }
    
    // Remover formul√°rio de adi√ß√£o
    const addForm = section.querySelector('.add-member-form');
    if (addForm) {
        addForm.remove();
    }
    
    // Atualizar a lista de membros (remover bot√µes de exclus√£o)
    updateTeamMembers(equipe);
}

// Mostrar formul√°rio de adi√ß√£o de membros
function showAddMemberForm(equipe, section) {
    // Obter o container onde fica a lista de membros
    const membersContainer = section.querySelector('.equipe-membros');
    if (!membersContainer) return;
    
    // Verificar se o formul√°rio j√° existe
    let addForm = section.querySelector('.add-member-form');
    
    if (!addForm) {
        // Criar formul√°rio de adi√ß√£o
        addForm = document.createElement('div');
        addForm.className = 'add-member-form';
        
        // Listar os militares dispon√≠veis (n√£o alocados em outras equipes)
        const availableMilitaries = getAvailableMilitaries();
        
        // Montar o HTML do formul√°rio
        addForm.innerHTML = `
            <div class="form-title">Adicionar Militar √† Equipe ${equipe.toUpperCase()}</div>
            <div class="form-content">
                <select id="add-member-${equipe}" class="member-select">
                    <option value="">Selecione um militar</option>
                    ${availableMilitaries.map(mil => `<option value="${mil}">${mil}</option>`).join('')}
                </select>
                <button class="add-member-btn" data-team="${equipe}">Adicionar</button>
            </div>
        `;
        
        // Adicionar antes da lista de membros
        membersContainer.parentNode.insertBefore(addForm, membersContainer);
        
        // Adicionar evento ao bot√£o de adicionar membro
        const addBtn = addForm.querySelector('.add-member-btn');
        if (addBtn) {
            addBtn.addEventListener('click', function() {
                const select = document.getElementById(`add-member-${equipe}`);
                if (select && select.value) {
                    addMemberToTeam(select.value, equipe);
                    
                    // Atualizar lista de membros com bot√µes de remo√ß√£o
                    showRemoveButtons(equipe);
                    
                    // Atualizar o formul√°rio com a lista atualizada de militares dispon√≠veis
                    const newAvailableMilitaries = getAvailableMilitaries();
                    select.innerHTML = `
                        <option value="">Selecione um militar</option>
                        ${newAvailableMilitaries.map(mil => `<option value="${mil}">${mil}</option>`).join('')}
                    `;
                } else {
                    alert('Por favor, selecione um militar para adicionar.');
                }
            });
        }
    } else {
        // Mostrar o formul√°rio se estiver escondido
        addForm.style.display = 'block';
    }
}

// Obter militares dispon√≠veis (n√£o alocados em nenhuma equipe)
function getAvailableMilitaries() {
    // Obter todos os militares j√° alocados
    const alfa = JSON.parse(localStorage.getItem('equipe_alfa')) || [];
    const bravo = JSON.parse(localStorage.getItem('equipe_bravo')) || [];
    const charlie = JSON.parse(localStorage.getItem('equipe_charlie')) || [];
    
    // Combinar todas as equipes para ver quem j√° est√° alocado
    const allocatedMilitaries = [...alfa, ...bravo, ...charlie];
    
    // Militares ainda n√£o alocados
    return allMilitaryDatabase.filter(
        military => !allocatedMilitaries.includes(military)
    ).sort();
}

// Mostrar bot√µes de remo√ß√£o para cada membro
function showRemoveButtons(equipe) {
    const container = document.querySelector(`.equipe-${equipe} .equipe-membros`);
    if (!container) return;
    
    // Obter membros da equipe
    const members = JSON.parse(localStorage.getItem(`equipe_${equipe}`)) || [];
    
    // Limpar o container
    container.innerHTML = '';
    
    // Adicionar cada membro com bot√£o de remo√ß√£o
    members.forEach((member, index) => {
        const li = document.createElement('li');
        li.className = 'equipe-membro';
        li.innerHTML = `
            <div class="membro-info">
                <strong>${member}</strong>
            </div>
            <button class="remove-member-btn" data-team="${equipe}" data-index="${index}">üóëÔ∏è Remover</button>
        `;
        container.appendChild(li);
    });
    
    // Adicionar eventos aos bot√µes de remo√ß√£o
    container.querySelectorAll('.remove-member-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const team = this.getAttribute('data-team');
            const index = parseInt(this.getAttribute('data-index'));
            removeMemberFromTeam(team, index);
            
            // Atualizar a lista de membros com bot√µes de remo√ß√£o
            showRemoveButtons(team);
            
            // Atualizar o formul√°rio de adi√ß√£o com a nova lista de militares dispon√≠veis
            updateAddMemberForm(team);
        });
    });
}

// Atualizar formul√°rio de adi√ß√£o de membros com a lista atualizada de militares
function updateAddMemberForm(equipe) {
    const select = document.getElementById(`add-member-${equipe}`);
    if (select) {
        const availableMilitaries = getAvailableMilitaries();
        select.innerHTML = `
            <option value="">Selecione um militar</option>
            ${availableMilitaries.map(mil => `<option value="${mil}">${mil}</option>`).join('')}
        `;
    }
}

// Adicionar um militar a uma equipe
function addMemberToTeam(military, team) {
    try {
        // Verificar se o militar existe no banco de dados
        if (!allMilitaryDatabase.includes(military)) {
            allMilitaryDatabase.push(military);
        }
        
        // Verificar se o militar j√° est√° em outra equipe
        const otherTeams = ['alfa', 'bravo', 'charlie'].filter(t => t !== team);
        
        for (const otherTeam of otherTeams) {
            const otherMembers = JSON.parse(localStorage.getItem(`equipe_${otherTeam}`)) || [];
            const index = otherMembers.indexOf(military);
            
            if (index !== -1) {
                if (confirm(`Este militar j√° est√° na equipe ${otherTeam.toUpperCase()}. Deseja transferi-lo para a equipe ${team.toUpperCase()}?`)) {
                    // Remover da outra equipe
                    otherMembers.splice(index, 1);
                    localStorage.setItem(`equipe_${otherTeam}`, JSON.stringify(otherMembers));
                    
                    // Atualizar a interface da outra equipe se estiver em modo de edi√ß√£o
                    const otherSection = document.querySelector(`.equipe-${otherTeam}`);
                    if (otherSection && otherSection.classList.contains('edit-mode')) {
                        showRemoveButtons(otherTeam);
                        updateAddMemberForm(otherTeam);
                    } else {
                        updateTeamMembers(otherTeam);
                    }
                } else {
                    return; // Cancelou a transfer√™ncia
                }
                break;
            }
        }
        
        // Adicionar √† equipe
        const members = JSON.parse(localStorage.getItem(`equipe_${team}`)) || [];
        
        // Verificar se j√° est√° na equipe
        if (members.includes(military)) {
            alert(`Este militar j√° est√° na equipe ${team.toUpperCase()}.`);
            return;
        }
        
        members.push(military);
        localStorage.setItem(`equipe_${team}`, JSON.stringify(members));
        
        // Atualizar o contador de militares na equipe
        updateTeamCount(team, members.length);
        
    } catch (error) {
        console.error('Erro ao adicionar militar:', error);
        alert('Erro ao adicionar militar. Tente novamente.');
    }
}

// Remover um militar de uma equipe
function removeMemberFromTeam(team, index) {
    try {
        const members = JSON.parse(localStorage.getItem(`equipe_${team}`)) || [];
        
        if (index < 0 || index >= members.length) {
            console.error('√çndice inv√°lido para remo√ß√£o');
            return;
        }
        
        const military = members[index];
        
        if (confirm(`Tem certeza que deseja remover ${military} da equipe ${team.toUpperCase()}?`)) {
            // Remover militar
            members.splice(index, 1);
            localStorage.setItem(`equipe_${team}`, JSON.stringify(members));
            
            // Atualizar o contador de militares na equipe
            updateTeamCount(team, members.length);
        }
    } catch (error) {
        console.error('Erro ao remover militar:', error);
        alert('Erro ao remover militar. Tente novamente.');
    }
}

// Atualizar contador de militares na equipe
function updateTeamCount(team, count) {
    const title = document.querySelector(`.equipe-${team} .equipe-title`);
    if (title) {
        // Atualizar o texto que mostra o n√∫mero de militares
        const titleText = title.textContent;
        const updatedText = titleText.replace(/\(\d+\s+Policiais\)/, `(${count} Policiais)`);
        
        // Substitui apenas a parte do texto, mantendo elementos filhos (como o bot√£o de edi√ß√£o)
        const childNodes = Array.from(title.childNodes);
        for (let i = 0; i < childNodes.length; i++) {
            if (childNodes[i].nodeType === Node.TEXT_NODE) {
                childNodes[i].textContent = updatedText;
                break;
            }
        }
    }
}

// Atualizar membros da equipe (modo normal, sem bot√µes de remo√ß√£o)
function updateTeamMembers(team) {
    const container = document.querySelector(`.equipe-${team} .equipe-membros`);
    if (!container) return;
    
    const members = JSON.parse(localStorage.getItem(`equipe_${team}`)) || [];
    
    // Limpar o container
    container.innerHTML = '';
    
    // Adicionar cada membro
    members.forEach(member => {
        const li = document.createElement('li');
        li.className = 'equipe-membro';
        li.innerHTML = `<strong>${member}</strong>`;
        container.appendChild(li);
    });
    
    // Atualizar o contador de militares na equipe
    updateTeamCount(team, members.length);
}

// Adicionar estilos espec√≠ficos para o editor
function addEditorStyles() {
    const style = document.createElement('style');
    style.textContent = `
        /* Estilo para o modo de edi√ß√£o */
        .edit-mode .equipe-membro {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background-color: #f1f5f9;
            border: 1px solid #e2e8f0;
            padding: 10px;
            transition: all 0.2s ease;
        }
        
        .edit-mode .equipe-membro:hover {
            background-color: #e2e8f0;
        }
        
        .edit-mode .equipe-membros {
            columns: 1 !important;
        }
        
        /* Bot√£o de remo√ß√£o */
        .remove-member-btn {
            background-color: #ef4444;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 5px 10px;
            cursor: pointer;
            font-size: 0.8rem;
            transition: all 0.2s ease;
        }
        
        .remove-member-btn:hover {
            background-color: #b91c1c;
        }
        
        /* Bot√£o de edi√ß√£o/salvar */
        .edit-btn {
            padding: 5px 10px;
            border-radius: 4px;
            border: none;
            cursor: pointer;
            margin-left: 10px;
            font-size: 0.8rem;
            background-color: #3b82f6;
            color: white;
        }
        
        .edit-btn.save-btn {
            background-color: #10b981;
        }
        
        /* Formul√°rio de adi√ß√£o */
        .add-member-form {
            background-color: #f8fafc;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
            border: 1px solid #e2e8f0;
        }
        
        .form-title {
            font-weight: bold;
            margin-bottom: 10px;
            color: #1e3a8a;
        }
        
        .form-content {
            display: flex;
            gap: 10px;
            align-items: center;
        }
        
        .member-select {
            flex-grow: 1;
            padding: 8px;
            border-radius: 4px;
            border: 1px solid #cbd5e1;
        }
        
        .add-member-btn {
            background-color: #3b82f6;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 8px 12px;
            cursor: pointer;
        }
        
        .add-member-btn:hover {
            background-color: #2563eb;
        }
    `;
    document.head.appendChild(style);
}

// Inicializar o sistema de edi√ß√£o na p√°gina escalas.html
document.addEventListener('DOMContentLoaded', function() {
    if (window.location.pathname.includes('escalas.html')) {
        console.log('Inicializando sistema de edi√ß√£o na p√°gina de escalas');
        
        // Inicializar dados padr√£o se necess√°rio
        initializeDefaultTeamData();
        
        // Adicionar estilos CSS
        addEditorStyles();
        
        // Substituir a fun√ß√£o original de openEquipeModal 
        // (isso acontece automaticamente quando este script √© carregado)
        
        // Certificar-se de que os dados atuais est√£o sendo exibidos
        const teams = ['alfa', 'bravo', 'charlie'];
        teams.forEach(updateTeamMembers);
    }
});