// Sistema de autentica√ß√£o independente
// Este arquivo deve ser inclu√≠do antes de qualquer outro script
console.log("Sistema de autentica√ß√£o carregado!");

// Criar modal de login automaticamente
document.addEventListener('DOMContentLoaded', function() {
    console.log("Inicializando sistema de autentica√ß√£o...");
    criarModalLogin();
    setupAdminButton();
    
    // Bloquear fun√ß√µes de edi√ß√£o de equipes por seguran√ßa
    window.toggleEditMode = function() {
        console.warn("Funcionalidade de edi√ß√£o de equipes desativada");
        return false;
    };
    
    window.addMilitaryToTeam = function() {
        console.warn("Funcionalidade de adi√ß√£o de militares √†s equipes desativada");
        return false;
    };
    
    window.initTeamEditor = function() {
        console.warn("Editor de equipes desativado");
        return false;
    };
});

function criarModalLogin() {
    // Verificar se o modal j√° existe
    if (document.getElementById('loginModal')) {
        return;
    }
    
    // Criar o modal
    const modalHtml = `
        <div id="loginModal" class="modal">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">√Årea Administrativa</h2>
                    <button id="closeLoginModal" class="close-button">&times;</button>
                </div>
                <div class="modal-body">
                    <div id="loginForm">
                        <div class="form-group">
                            <label for="username">Usu√°rio:</label>
                            <input type="text" id="username" placeholder="Digite seu usu√°rio" value="admin">
                        </div>
                        <div class="form-group">
                            <label for="password">Senha:</label>
                            <input type="password" id="password" placeholder="Digite sua senha" value="admin123">
                        </div>
                        <div id="loginError" style="color: red; margin-top: 10px; display: none;">
                            Usu√°rio ou senha incorretos!
                        </div>
                        <div class="form-buttons">
                            <button id="submitLoginBtn" type="button">Entrar</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    // Adicionar o modal ao corpo da p√°gina
    const modalContainer = document.createElement('div');
    modalContainer.innerHTML = modalHtml;
    document.body.appendChild(modalContainer);
    
    // Configurar os eventos do modal
    const modal = document.getElementById('loginModal');
    const closeBtn = document.getElementById('closeLoginModal');
    const submitBtn = document.getElementById('submitLoginBtn');
    
    closeBtn.addEventListener('click', function() {
        modal.classList.remove('active');
    });
    
    submitBtn.addEventListener('click', fazerLogin);

    // Adicione evento para a tecla Enter no campo de senha
    document.getElementById('password').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            fazerLogin();
        }
    });
}

async function fazerLogin() {
    const username = document.getElementById('username').value;
    const password = document.getElementById('password').value;
    
    try {
        const response = await fetch('/api/auth/login', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ username, password })
        });
        
        if (response.ok) {
            const userData = await response.json();
            
            // Salvar no localStorage
            localStorage.setItem('escalasUserData', JSON.stringify(userData));
            
            // Fechar o modal
            document.getElementById('loginModal').classList.remove('active');
            
            // Atualizar a UI para o estado autenticado
            atualizarInterfaceAutenticada();
            
            // Exibir mensagem de sucesso
            alert('Login realizado com sucesso!');
            
            // Recarregar a p√°gina para aplicar as permiss√µes
            window.location.reload();
        } else {
            // Mostrar erro
            document.getElementById('loginError').textContent = 'Usu√°rio ou senha incorretos';
            document.getElementById('loginError').style.display = 'block';
            setTimeout(() => {
                document.getElementById('loginError').style.display = 'none';
            }, 3000);
        }
    } catch (error) {
        console.error('Erro ao fazer login:', error);
        document.getElementById('loginError').textContent = 'Erro ao conectar com o servidor';
        document.getElementById('loginError').style.display = 'block';
    }
}

// Fun√ß√£o mantida para compatibilidade com c√≥digo existente, mas n√£o √© mais usada diretamente
function validarCredenciais(username, password) {
    // Credenciais fixas para o administrador
    return (username === 'admin' && password === 'admin123');
}

function logout() {
    // Remover dados do localStorage
    localStorage.removeItem('escalasUserData');
    
    // Atualizar a UI para o estado n√£o autenticado
    atualizarInterfaceNaoAutenticada();
    
    // Exibir mensagem
    alert('Logout realizado com sucesso!');
    
    // Recarregar a p√°gina para garantir que tudo seja resetado
    window.location.reload();
}

function verificarAutenticacao() {
    console.log("Verificando autentica√ß√£o...");
    const userData = localStorage.getItem('escalasUserData');
    
    if (userData) {
        try {
            const user = JSON.parse(userData);
            if (user && user.isAdmin) {
                console.log("Usu√°rio autenticado:", user);
                atualizarInterfaceAutenticada();
                return true;
            }
        } catch (e) {
            console.error('Erro ao processar dados de autentica√ß√£o:', e);
            localStorage.removeItem('escalasUserData');
        }
    }
    
    console.log("Usu√°rio n√£o autenticado");
    atualizarInterfaceNaoAutenticada();
    return false;
}

function atualizarInterfaceAutenticada() {
    console.log("Atualizando interface para usu√°rio autenticado");
    
    // Mostrar elementos administrativos, exceto os relacionados √† edi√ß√£o de equipes
    const adminElements = document.querySelectorAll('.admin-only');
    adminElements.forEach(el => {
        const id = el.id || '';
        // Se o ID cont√©m "editEquipe", n√£o mostrar o elemento
        if (!id.includes('editEquipe')) {
            const originalDisplay = el.tagName.toLowerCase() === 'button' ? 'inline-flex' : 'block';
            el.style.display = originalDisplay;
            el.style.pointerEvents = 'auto';
            el.style.cursor = 'pointer';
        } else {
            // Manter ocultos os elementos de edi√ß√£o de equipes
            el.style.display = 'none';
        }
    });
    
    // Mostrar a √°rea administrativa
    const adminButtons = document.querySelector('.admin-buttons');
    if (adminButtons) {
        adminButtons.style.display = 'flex';
    }
    
    // Atualizar bot√£o de login para "Sair"
    const loginBtn = document.getElementById('loginBtn');
    if (loginBtn) {
        loginBtn.innerHTML = '<span class="login-icon">üîì</span><span>Sair</span>';
        
        // Remover todos os event listeners existentes
        const newLoginBtn = loginBtn.cloneNode(true);
        loginBtn.parentNode.replaceChild(newLoginBtn, loginBtn);
        
        // Adicionar novo event listener para logout
        newLoginBtn.addEventListener('click', logout);
    }
}

function atualizarInterfaceNaoAutenticada() {
    console.log("Atualizando interface para usu√°rio n√£o autenticado");
    
    // Ocultar elementos administrativos
    const adminElements = document.querySelectorAll('.admin-only');
    adminElements.forEach(el => {
        el.style.display = 'none';
    });
    
    // Ocultar a √°rea administrativa
    const adminButtons = document.querySelector('.admin-buttons');
    if (adminButtons) {
        adminButtons.style.display = 'none';
    }
    
    // Atualizar bot√£o para "√Årea Administrativa"
    const loginBtn = document.getElementById('loginBtn');
    if (loginBtn) {
        loginBtn.innerHTML = '<span class="login-icon">üîí</span><span>√Årea Administrativa</span>';
        
        // Remover todos os event listeners existentes
        const newLoginBtn = loginBtn.cloneNode(true);
        loginBtn.parentNode.replaceChild(newLoginBtn, loginBtn);
        
        // Adicionar novo event listener para mostrar o modal de login
        newLoginBtn.addEventListener('click', function() {
            document.getElementById('loginModal').classList.add('active');
        });
    }
}

function setupAdminButton() {
    console.log("Configurando bot√£o admin...");
    
    // Procurar pelo bot√£o de login existente - ID correto √© loginBtn
    const loginBtn = document.getElementById('loginBtn');
    
    if (loginBtn) {
        console.log("Bot√£o admin encontrado, configurando eventos");
        
        // Verificar se o usu√°rio j√° est√° autenticado
        if (verificarAutenticacao()) {
            // J√° est√° configurado pela fun√ß√£o verificarAutenticacao
        } else {
            // Limpar eventos existentes para evitar conflitos
            const newLoginBtn = loginBtn.cloneNode(true);
            loginBtn.parentNode.replaceChild(newLoginBtn, loginBtn);
            
            // Configurar para abrir o modal de login
            newLoginBtn.addEventListener('click', function() {
                console.log("Clique no bot√£o de login");
                document.getElementById('loginModal').classList.add('active');
            });
        }
    } else {
        console.log("Bot√£o admin n√£o encontrado, aguardando carregamento da p√°gina");
        
        // Tentar novamente ap√≥s um curto intervalo (para garantir que o DOM esteja carregado)
        setTimeout(setupAdminButton, 500);
    }
}