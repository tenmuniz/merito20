// Script para verificar a conex√£o com o banco de dados 
// e criar vari√°veis de ambiente padr√£o se necess√°rio
import pg from 'pg';
const { Pool } = pg;

async function checkDatabaseAndSetDefaults() {
  // Se DATABASE_URL n√£o estiver definida, criar um valor padr√£o para evitar falhas
  if (!process.env.DATABASE_URL) {
    console.log('‚ö†Ô∏è ALERTA: DATABASE_URL n√£o est√° definida');
    
    // Em produ√ß√£o, definir uma URL padr√£o para permitir que o aplicativo inicie
    if (process.env.NODE_ENV === 'production') {
      console.log('üîß Definindo vari√°vel DATABASE_URL padr√£o para ambientes sem banco de dados');
      process.env.DATABASE_URL = 'postgres://postgres:postgres@localhost:5432/postgres';
    }
  } else {
    // Se DATABASE_URL estiver definida, testar a conex√£o
    try {
      const pool = new Pool({
        connectionString: process.env.DATABASE_URL,
        // Timeout de conex√£o mais curto para n√£o travar
        connectionTimeoutMillis: 5000
      });
      
      const client = await pool.connect();
      try {
        await client.query('SELECT 1');
        console.log('‚úÖ Conex√£o com banco de dados bem-sucedida');
      } finally {
        client.release();
        await pool.end();
      }
    } catch (error) {
      console.error('‚ùå Erro ao conectar ao banco de dados:', error.message);
      console.warn('‚ö†Ô∏è Aplica√ß√£o continuar√° sem acesso ao banco de dados');
    }
  }
}

// Executar a verifica√ß√£o
checkDatabaseAndSetDefaults().catch(err => {
  console.error('Erro fatal na verifica√ß√£o do banco de dados:', err);
  // N√£o falhar completamente, apenas avisar
});

export default checkDatabaseAndSetDefaults;